diff a/app/(components)/homeProductSection.tsx b/app/(components)/homeProductSection.tsx	(rejected hunks)
@@ -90,68 +90,75 @@ export default function HomeProductSection() {
       reloadTimeoutRef.current = null;
     }
     return () => {
       if (reloadTimeoutRef.current) clearTimeout(reloadTimeoutRef.current);
     };
   }, [isLoading, allProducts.length]);
 
   const openProductDetail = (product: any) => {
     if (typeof window !== "undefined") {
       scrollPositionRef.current = window.scrollY;
     }
     setSelectedProduct(product);
   };
 
   const closeProductDetail = () => {
     setSelectedProduct(null);
     if (typeof window !== "undefined") {
       window.scrollTo(0, scrollPositionRef.current);
       const url = new URL(window.location.href);
       url.searchParams.delete("product");
       window.history.replaceState({}, "", url.toString());
       sessionStorage.removeItem("scrollPos");
     }
   };
 
-  const openCart = () => {
+  const openCart = useCallback(() => {
     if (typeof window !== "undefined") {
       scrollPositionRef.current = window.scrollY;
     }
+    hideLoading();
     setIsCartVisible(true);
-  };
+  }, [hideLoading]);
 
   const closeCart = () => {
     setIsCartVisible(false);
     if (typeof window !== "undefined") {
       window.scrollTo(0, scrollPositionRef.current);
       const url = new URL(window.location.href);
       url.searchParams.delete("cart");
       window.history.replaceState({}, "", url.toString());
       sessionStorage.removeItem("scrollPos");
     }
   };
 
+  useEffect(() => {
+    const handleOpen = () => openCart();
+    window.addEventListener("openCart", handleOpen);
+    return () => window.removeEventListener("openCart", handleOpen);
+  }, [openCart]);
+
   const MAX_RETRIES = 5;
 
   const fetchData = useCallback(async (attempt = 0): Promise<void> => {
     if (attempt === 0) setError(null);
     setIsLoading(true);
     const cachedCategories = localStorage.getItem("categories");
     const cachedProducts = localStorage.getItem("products");
     const cacheTimestamp = localStorage.getItem("cacheTimestamp");
     const now = Date.now();
     if (
       cachedCategories &&
       cachedProducts &&
       cacheTimestamp &&
       now - parseInt(cacheTimestamp, 10) < 60 * 1000
     ) {
       setCategories(sortByImportanceDesc(JSON.parse(cachedCategories)));
       const sortedProducts = sortByImportanceDesc(JSON.parse(cachedProducts));
       setAllProducts(sortedProducts);
       setProducts(sortedProducts);
       setIsLoading(false);
       return;
     }
     try {
       const [fetchedCategories, fetchedProducts] = await Promise.all([
         getCategories(),
@@ -221,58 +228,59 @@ export default function HomeProductSection() {
           );
         else showToast(`검사 결과로 추천된 카테고리의 상품들이에요.`);
         toastShownRef.current = true;
       }
     } else if (singleCat) {
       const id = parseInt(singleCat, 10);
       if (!isNaN(id)) setSelectedCategories([id]);
     }
   }, [searchParams, categories, showToast]);
 
   useEffect(() => {
     const prod = searchParams.get("product");
     if (prod && allProducts.length > 0) {
       const id = parseInt(prod, 10);
       const target = allProducts.find((p) => p.id === id);
       if (target) {
         const stored = sessionStorage.getItem("scrollPos");
         if (stored) scrollPositionRef.current = parseInt(stored, 10);
         setSelectedProduct(target);
       }
     }
   }, [searchParams, allProducts]);
   useEffect(() => {
     const cart = searchParams.get("cart");
     if (cart === "open") {
+      hideLoading();
       const stored = sessionStorage.getItem("scrollPos");
       if (stored) scrollPositionRef.current = parseInt(stored, 10);
       setIsCartVisible(true);
       const url = new URL(window.location.toString());
       url.searchParams.delete("cart");
       window.history.replaceState({}, "", url.toString());
     }
-  }, [searchParams]);
+  }, [searchParams, hideLoading]);
 
   useEffect(() => {
     const timestampKey = "cartTimestamp";
     const now = Date.now();
     const storedTimestamp = localStorage.getItem(timestampKey);
 
     const restoring = localStorage.getItem("restoreCartFromBackup") === "1";
     const inCheckout = localStorage.getItem("checkoutInProgress") === "1";
     if (restoring || inCheckout) {
       localStorage.setItem(timestampKey, now.toString());
       return;
     }
 
     const STALE = 7 * 24 * 60 * 60 * 1000;
     if (!storedTimestamp || now - parseInt(storedTimestamp, 10) > STALE) {
       ["categories", "products", "cacheTimestamp"].forEach((k) =>
         localStorage.removeItem(k)
       );
     }
     localStorage.setItem(timestampKey, now.toString());
   }, []);
 
   useEffect(() => {
     const needRestore = localStorage.getItem("restoreCartFromBackup") === "1";
     const backup = localStorage.getItem("cartBackup");
