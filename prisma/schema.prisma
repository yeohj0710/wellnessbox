generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Category_ {
  idx       Int        @id @default(autoincrement())
  name      String?    @unique
  image     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  products  Product_[] @relation("CategoryProductRelation")
}

model Product_ {
  idx         Int         @id @default(autoincrement())
  name        String?
  images      String[]
  description String?
  price       Int?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
  categories  Category_[] @relation("CategoryProductRelation")
  pharmacies  Pharmacy_[] @relation("PharmacyProductRelation")
}

model Pharmacy_ {
  idx       Int        @id @default(autoincrement())
  name      String?
  address   String?
  userId    String?    @unique
  password  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  products  Product_[] @relation("PharmacyProductRelation")
  orders    Order_[]
}

model Order_ {
  idx         Int        @id @default(autoincrement())
  phone       String?
  address     String?
  password    String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  pharmacyIdx Int?
  pharmacy    Pharmacy_? @relation(fields: [pharmacyIdx], references: [idx])
}

model User {
  idx        Int       @id @default(autoincrement())
  id         String    @unique
  password   String
  nickname   String    @unique
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  avatar     String?
  comment    Comment[]
  post       Post[]
}

model Post {
  idx        Int       @id @default(autoincrement())
  category   String
  title      String
  content    String
  password   String?
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  userIdx    Int?
  ip         String?
  nickname   String?
  comment    Comment[]
  user       User?     @relation(fields: [userIdx], references: [idx], onDelete: Cascade)
}

model Comment {
  idx           Int       @id @default(autoincrement())
  content       String
  images        String[]
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  nickname      String?
  ip            String?
  password      String?
  userIdx       Int?
  postIdx       Int
  parentIdx     Int?
  Comment       Comment?  @relation("CommentToComment", fields: [parentIdx], references: [idx])
  other_Comment Comment[] @relation("CommentToComment")
  post          Post      @relation(fields: [postIdx], references: [idx], onDelete: Cascade)
  user          User?     @relation(fields: [userIdx], references: [idx], onDelete: Cascade)
}

model Subscription {
  id         Int      @id @default(autoincrement())
  endpoint   String
  p256dh     String
  auth       String
  type       String
  postId     Int?
  created_at DateTime @default(now())
  latitude   Float?
  longitude  Float?
  commentId  Int?

  @@unique([endpoint, type, postId, commentId])
}
