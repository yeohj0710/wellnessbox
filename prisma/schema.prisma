generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider  = "postgresql"
  url       = env("WELLNESSBOX_PRISMA_URL")
  directUrl = env("WELLNESSBOX_PRISMA_URL")
}

model Category {
  id         Int       @id @default(autoincrement())
  name       String?
  image      String?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  importance Float?
  products   Product[] @relation("CategoryProductRelation")
}

model Product {
  id               Int               @id @default(autoincrement())
  name             String?
  images           String[]
  description      String?
  rating           Float?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
  importance       Float?
  pharmacyProducts PharmacyProduct[]
  reviews          Review[]
  categories       Category[]        @relation("CategoryProductRelation")
}

model Pharmacy {
  id                 Int               @id @default(autoincrement())
  name               String?
  address            String?
  phone              String?
  userId             String?
  password           String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now()) @updatedAt
  registrationNumber String?
  representativeName String?
  messages           Message[]
  orders             Order[]
  pharmacyProducts   PharmacyProduct[]
  subscriptions      Subscription[]
}

model PharmacyProduct {
  id         Int         @id @default(autoincrement())
  optionType String?
  price      Int?
  stock      Int?
  capacity   String?
  pharmacyId Int?
  productId  Int?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
  importance Float?
  orderItems OrderItem[]
  pharmacy   Pharmacy?   @relation(fields: [pharmacyId], references: [id])
  product    Product?    @relation(fields: [productId], references: [id])
}

model Order {
  id               Int            @id @default(autoincrement())
  roadAddress      String?
  detailAddress    String?
  phone            String?
  password         String?
  requestNotes     String?
  entrancePassword String?
  directions       String?
  paymentId        String?
  transactionType  String?
  txId             String?
  totalPrice       Int?
  status           String?
  pharmacyId       Int?
  riderId          Int?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @default(now()) @updatedAt
  endpoint         String?
  messages         Message[]
  pharmacy         Pharmacy?      @relation(fields: [pharmacyId], references: [id])
  rider            Rider?         @relation(fields: [riderId], references: [id])
  orderItems       OrderItem[]
  reviews          Review[]
  subscriptions    Subscription[]
}

model OrderItem {
  id                Int              @id @default(autoincrement())
  quantity          Int?
  orderId           Int?
  pharmacyProductId Int?
  reviewId          Int?             @unique
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now()) @updatedAt
  order             Order?           @relation(fields: [orderId], references: [id])
  pharmacyProduct   PharmacyProduct? @relation(fields: [pharmacyProductId], references: [id])
  review            Review?
}

model Message {
  id         Int       @id @default(autoincrement())
  orderId    Int?
  content    String?
  timestamp  DateTime  @default(now())
  pharmacyId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  order      Order?    @relation(fields: [orderId], references: [id])
  pharmacy   Pharmacy? @relation(fields: [pharmacyId], references: [id])
}

model Rider {
  id            Int            @id @default(autoincrement())
  phone         String?
  userId        String?
  password      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @default(now()) @updatedAt
  orders        Order[]
  subscriptions Subscription[]
}

model Review {
  id          Int        @id @default(autoincrement())
  rate        Float?
  content     String?
  images      String[]
  orderId     Int?
  productId   Int?
  orderItemId Int?       @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  order       Order?     @relation(fields: [orderId], references: [id])
  orderItem   OrderItem? @relation(fields: [orderItemId], references: [id])
  product     Product?   @relation(fields: [productId], references: [id])
}

model Subscription {
  id         Int       @id @default(autoincrement())
  endpoint   String
  auth       String
  p256dh     String
  orderId    Int?
  createdAt  DateTime  @default(now())
  pharmacyId Int?
  role       String
  riderId    Int?
  order      Order?    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  pharmacy   Pharmacy? @relation(fields: [pharmacyId], references: [id], onDelete: Cascade)
  rider      Rider?    @relation(fields: [riderId], references: [id], onDelete: Cascade)

  @@unique([role, orderId, endpoint])
  @@unique([role, pharmacyId, endpoint])
  @@unique([role, riderId, endpoint])
}

model Client {
  id             String             @id
  userAgent      String?
  lastIpHash     String?
  pushEndpoint   String?
  createdAt      DateTime           @default(now())
  lastSeenAt     DateTime           @default(now())
  assessResults  AssessmentResult[]
  chatSessions   ChatSession[]
  checkAiResults CheckAiResult[]
  profile        UserProfile?

  @@index([lastSeenAt])
}

model AssessmentResult {
  id              String   @id @default(cuid())
  clientId        String
  answers         Json
  cResult         Json
  tzOffsetMinutes Int      @default(0)
  createdAt       DateTime @default(now())
  client          Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId, createdAt])
}

model CheckAiResult {
  id              String   @id @default(cuid())
  clientId        String
  result          Json
  tzOffsetMinutes Int      @default(0)
  createdAt       DateTime @default(now())
  answers         Json?
  client          Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId, createdAt])
}

model UserProfile {
  id        String   @id @default(cuid())
  clientId  String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@unique([clientId])
  @@index([clientId, updatedAt])
}

model ChatSession {
  id        String        @id
  clientId  String
  title     String
  status    String        @default("active")
  meta      Json?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @default(now()) @updatedAt
  messages  ChatMessage[]
  client    Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@index([clientId, updatedAt])
}

model ChatMessage {
  id              String      @id
  sessionId       String
  role            ChatRole
  content         String
  tokensIn        Int?
  tokensOut       Int?
  meta            Json?
  tzOffsetMinutes Int         @default(0)
  createdAt       DateTime    @default(now())
  session         ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, createdAt])
}

model Config {
  key       String   @id
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ChatRole {
  system
  user
  assistant
}
