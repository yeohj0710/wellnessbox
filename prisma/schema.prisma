generator client {
  provider   = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider  = "postgresql"
  url       = env("WELLNESSBOX_PRISMA_URL")
  directUrl = env("WELLNESSBOX_PRISMA_URL")
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String?
  image     String?
  importance Float?
  products  Product[] @relation("CategoryProductRelation")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
}

model Product {
  id               Int               @id @default(autoincrement())
  name             String?
  images           String[]
  description      String?
  rating           Float?
  importance       Float?
  categories       Category[]        @relation("CategoryProductRelation")
  pharmacyProducts PharmacyProduct[]
  reviews          Review[]
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now()) @updatedAt
}

model Pharmacy {
  id                 Int               @id @default(autoincrement())
  name               String?
  address            String?
  phone              String?
  userId             String?
  password           String?
  representativeName String?
  registrationNumber String?
  pharmacyProducts   PharmacyProduct[]
  orders             Order[]
  messages           Message[]
  subscriptions     Subscription[]
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @default(now()) @updatedAt
}

model PharmacyProduct {
  id         Int         @id @default(autoincrement())
  optionType String?
  price      Int?
  stock      Int?
  capacity   String?
  importance Float?
  pharmacy   Pharmacy?   @relation(fields: [pharmacyId], references: [id], onDelete: SetNull)
  pharmacyId Int?
  product    Product?    @relation(fields: [productId], references: [id], onDelete: SetNull)
  productId  Int?
  orderItems OrderItem[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt
}

model Order {
  id               Int         @id @default(autoincrement())
  roadAddress      String?
  detailAddress    String?
  phone            String?
  password         String?
  requestNotes     String?
  entrancePassword String?
  directions       String?
  paymentId        String?
  transactionType  String?
  txId             String?
  totalPrice       Int?
  status           String?
  orderItems       OrderItem[]
  messages         Message[]
  pharmacy         Pharmacy?   @relation(fields: [pharmacyId], references: [id], onDelete: SetNull)
  pharmacyId       Int?
  rider            Rider?      @relation(fields: [riderId], references: [id], onDelete: SetNull)
  riderId          Int?
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now()) @updatedAt
  reviews          Review[]
  subscriptions   Subscription[]
}

model OrderItem {
  id                Int              @id @default(autoincrement())
  quantity          Int?
  order             Order?           @relation(fields: [orderId], references: [id], onDelete: SetNull)
  orderId           Int?
  pharmacyProduct   PharmacyProduct? @relation(fields: [pharmacyProductId], references: [id], onDelete: SetNull)
  pharmacyProductId Int?
  review            Review?
  reviewId          Int?             @unique
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @default(now()) @updatedAt
}

model Message {
  id         Int       @id @default(autoincrement())
  orderId    Int?
  content    String?
  timestamp  DateTime  @default(now())
  order      Order?    @relation(fields: [orderId], references: [id], onDelete: SetNull)
  pharmacy   Pharmacy? @relation(fields: [pharmacyId], references: [id])
  pharmacyId Int?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
}

model Rider {
  id        Int      @id @default(autoincrement())
  phone     String?
  userId    String?
  password  String?
  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Review {
  id          Int        @id @default(autoincrement())
  rate        Float?
  content     String?
  images      String[]
  order       Order?     @relation(fields: [orderId], references: [id])
  orderId     Int?
  product     Product?   @relation(fields: [productId], references: [id])
  productId   Int?
  orderItem   OrderItem? @relation(fields: [orderItemId], references: [id])
  orderItemId Int?       @unique
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
}

model Subscription {
  id        Int      @id @default(autoincrement())
  endpoint  String
  auth      String
  p256dh    String
  order     Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   Int?
  pharmacy  Pharmacy? @relation(fields: [pharmacyId], references: [id], onDelete: Cascade)
  pharmacyId Int?
  createdAt DateTime @default(now())
}
